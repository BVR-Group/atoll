///
///             \    |         | |
///            _ \   __|  _ \  | |
///           ___ \  |   (   | | |
///         _/    _\\__|\___/ _|_|
///
///
///  MIT License | Copyright 2017 BVR, LLC

import Foundation
import Accelerate
import simd

public func withUnsafeMutablePointer<T>(
    to a: List<T>,
    block: (UnsafeMutablePointer<T>) -> Void
) {
    block(a.pointer)
}

public func withUnsafeMutablePointers<T>(
    to a: List<T>,
    and b: List<T>,
    block: (UnsafeMutablePointer<T>, UnsafeMutablePointer<T>) -> Void
) {
    block(a.pointer, b.pointer)
}

public func withUnsafeMutablePointers<T>(
    to a: List<T>,
    b: List<T>,
    c: List<T>,
    block: (UnsafeMutablePointer<T>, UnsafeMutablePointer<T>, UnsafeMutablePointer<T>) -> Void
) {
    block(a.pointer, b.pointer, c.pointer)
}

public func result<T>(from list: List<T>, block: (UnsafeMutablePointer<T>) -> Void) -> T {
    var result: T = 0
    block(&result)
    return result
}

public func result<T>(from list: List<T>, block: (UnsafeMutablePointer<T>) -> Void) -> List<T> {
    let result = List<T>(count: list.count)
    block(result.pointer)
    return result
}

{% for type in types.implementing.Real %}

extension {{ type.name }} {
    public static func add(_ x: {{ type.name }}List, _ y: {{ type.name }}List) -> {{ type.name }}List {
        return result(from: x) { result in
            vDSP_vadd{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, y.pointer, 1, result, 1, x.vDSP_Length)
        }
    }

    public static func add(_ x: {{ type.name }}List, _ y: {{ type.name }}) -> {{ type.name }}List {
        var value = y
        return result(from: x) { result in
            vDSP_vsadd{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, &value, result, 1, x.vDSP_Length)
        }
    }

    public static func addInPlace(_ x: {{ type.name }}List, _ y: {{ type.name }}List) {
        vDSP_vadd{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, y.pointer, 1, x.pointer, 1, x.vDSP_Length)
    }

    public static func addInPlace(_ x: {{ type.name }}List, _ y: {{ type.name }}) {
        var value = y
        vDSP_vsadd{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, &value, x.pointer, 1, x.vDSP_Length)
    }

    public static func subtract(_ x: {{ type.name }}List, _ y: {{ type.name }}List) -> {{ type.name }}List {
        return result(from: x) { result in
            vDSP_vsub{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, y.pointer, 1, result, 1, x.vDSP_Length)
        }
    }

    public static func subtract(_ x: {{ type.name }}List, _ y:{{ type.name }}) -> {{ type.name }}List {
        var value = -y
        return result(from: x) { result in
            vDSP_vsadd{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, &value, result, 1, x.vDSP_Length)
        }
    }

    public static func subtractInPlace(_ x: {{ type.name }}List, _ y: {{ type.name }}List) {
        vDSP_vsub{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, y.pointer, 1, x.pointer, 1, x.vDSP_Length)
    }

    public static func subtractInPlace(_ x: {{ type.name }}List, _ y:{{ type.name }}) {
        var value = -y
        vDSP_vsadd{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, &value, x.pointer, 1, x.vDSP_Length)
    }

    public static func divide(_ x: {{ type.name }}List, _ y:{{ type.name }}List) -> {{ type.name }}List {
        return result(from: x) { result in
            vDSP_vdiv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, y.pointer, 1, result, 1, x.vDSP_Length)
        }
    }

    public static func divide(_ x: {{ type.name }}List, _ y:{{ type.name }}) -> {{ type.name }}List {
        var value = y
        return result(from: x) { result in
            vDSP_vsdiv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, &value, result, 1, x.vDSP_Length)
        }
    }

    public static func divideInPlace(_ x: {{ type.name }}List, _ y:{{ type.name }}List) {
        vDSP_vdiv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, y.pointer, 1, x.pointer, 1, x.vDSP_Length)
    }

    public static func divideInPlace(_ x: {{ type.name }}List, _ y:{{ type.name }}) {
        var value = y
        vDSP_vsdiv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, &value, x.pointer, 1, x.vDSP_Length)
    }

    public static func multiply(_ x: {{ type.name }}List, _ y: {{ type.name }}List) -> {{ type.name }}List {
        return result(from: x) { result in
            vDSP_vmul{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, y.pointer, 1, result, 1, x.vDSP_Length)
        }
    }

    public static func multiply(_ x: {{ type.name }}List, _ y: {{ type.name }}) -> {{ type.name }}List {
        var value = y
        return result(from: x) { result in
            vDSP_vsmul{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, &value, result, 1, x.vDSP_Length)
        }
    }

    public static func multiplyInPlace(_ x: {{ type.name }}List, _ y: {{ type.name }}List) {
        vDSP_vmul{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, y.pointer, 1, x.pointer, 1, x.vDSP_Length)
    }

    public static func multiplyInPlace(_ x: {{ type.name }}List, _ y: {{ type.name }}) {
        var value = y
        vDSP_vsmul{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, &value, x.pointer, 1, x.vDSP_Length)
    }

    public static func sum(_ x: {{ type.name }}List) -> {{ type.name }} {
        return result(from: x) { result in
            vDSP_sve{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, x.vDSP_Length)
        }
    }

    public static func pow(_ x: {{ type.name }}List, _ y: {{ type.name }}List) -> {{ type.name }}List {
        return result(from: x) { result in
            vvpow{% if type.name == "Float" %}f{% endif %}(result, x.pointer, y.pointer, x.countPointer)
        }
    }

    public static func exp(_ x: {{ type.name }}List) -> {{ type.name }}List {
        return result(from: x) { result in
            vvexp{% if type.name == "Float" %}f{% endif %}(result, x.pointer, x.countPointer)
        }
    }

    public static func powInPlace(_ x: {{ type.name }}List, _ y: {{ type.name }}List) {
        vvpow{% if type.name == "Float" %}f{% endif %}(x.pointer, x.pointer, y.pointer, x.countPointer)
    }
    
    public static func sqrt(_ x: {{ type.name }}List) -> {{ type.name }}List {
        return result(from: x) { result in
            vvsqrt{% if type.name == "Float" %}f{% endif %}(result, x.pointer, x.countPointer)
        }
    }
    
    public static func sqrtInPlace(_ x: {{ type.name }}List) {
        vvsqrt{% if type.name == "Float" %}f{% endif %}(x.pointer, x.pointer, x.countPointer)
    }

    public static func mod(_ x: {{ type.name }}List, _ y: {{ type.name }}List) -> {{ type.name }}List {
        return result(from: x) { result in
            vvfmod{% if type.name == "Float" %}f{% endif %}(result, x.pointer, y.pointer, x.countPointer)
        }
    }

    public static func rootMeanSquare(_ x: {{ type.name }}List) -> {{ type.name }} {
        return result(from: x) { result in
            vDSP_rmsqv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, x.vDSP_Length)
        }
    }

    public static func meanSquare(_ x: {{ type.name }}List) -> {{ type.name }} {
        return result(from: x) { result in
            vDSP_measqv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, x.vDSP_Length)
        }
    }

    public static func mean(_ x: {{ type.name }}List) -> {{ type.name }} {
        return result(from: x) { result in
            vDSP_meanv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, x.vDSP_Length)
        }
    }

    public static func meanMagnitude(_ x: {{ type.name }}List) -> {{ type.name }} {
        return result(from: x) { result in
            vDSP_meamgv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, x.vDSP_Length)
        }
    }

    public static func min(_ x: {{ type.name }}List) -> {{ type.name }} {
        return result(from: x) { result in
            vDSP_minv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, x.vDSP_Length)
        }
    }

    public static func max(_ x: {{ type.name }}List) -> {{ type.name }} {
        return result(from: x) { result in
            vDSP_maxv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, x.vDSP_Length)
        }
    }

    public static func abs(_ x: {{ type.name }}List) -> {{ type.name }}List {
        return result(from: x) { result in
            vDSP_vabs{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, 1, x.vDSP_Length)
        }
    }

    public static func log(_ x: {{ type.name }}List) -> {{ type.name}}List {
        return result(from: x) { result in
            vvlog{% if type.name == "Float" %}f{% endif %}(result, x.pointer, x.countPointer)
        }
    }

    public static func innerProduct(_ x: {{ type.name }}List, _ y: {{ type.name }}List) -> {{ type.name }} {
        return sum(multiply(x, y))
    }
}
{% endfor %}

{% for type in types.based.Real %}{%if type.name == "Double" %}
{% for method in type.allMethods %}

public func {{method.shortName}}<T>({% for parameter in method.parameters %}_ {{parameter.name}}: {%if parameter.typeName.name == 'List<Self>' %}List<T>{%else%}T{{parameter.type}}{%endif%}{% if not forloop.last %}, {% endif %}{% endfor %}){% if method.returnTypeName.name != "Void" %} -> {% if method.returnTypeName.name == "Self" %}T{%else%}List<T>{%endif%}{% endif %} {
    {% if method.returnTypeName.name != "Void" %}return {%endif%}T.{{method.shortName}}({% for parameter in method.parameters %}{{parameter.name}}{% if not forloop.last %}, {% endif %}{% endfor %})
}
{% endfor %}
{%endif%}{% endfor %}


