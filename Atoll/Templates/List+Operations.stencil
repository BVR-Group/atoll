//
//  List+Operations.swift
//  Atoll
//
//  Created by Dylan Wreggelsworth on 6/20/17.
//  Copyright Â© 2017 BVR, LLC. All rights reserved.
//

import Foundation
import Accelerate

public func withUnsafeMutablePointer<T>(
    to a: List<T>,
    block: (UnsafeMutablePointer<T>) -> Void
) {
    block(a.pointer)
}

public func withUnsafeMutablePointers<T>(
    to a: List<T>,
    and b: List<T>,
    block: (UnsafeMutablePointer<T>, UnsafeMutablePointer<T>) -> Void
) {
    block(a.pointer, b.pointer)
}

public func withUnsafeMutablePointers<T>(
    to a: List<T>,
    b: List<T>,
    c: List<T>,
    block: (UnsafeMutablePointer<T>, UnsafeMutablePointer<T>, UnsafeMutablePointer<T>) -> Void
) {
    block(a.pointer, b.pointer, c.pointer)
}

public func result<T>(from list: List<T>, block: (UnsafeMutablePointer<T>) -> Void) -> T {
    var result: T = 0
    block(&result)
    return result
}

public func result<T>(from list: List<T>, block: (UnsafeMutablePointer<T>) -> Void) -> List<T> {
    let result = List<T>(count: list.count)
    block(result.pointer)
    return result
}
{% for type in types.implementing.SupportedFloatType %}

// {{ type.name }}s

public func pow(_ x: {{ type.name }}List, _ y: {{ type.name }}List) -> {{ type.name }}List {
    return result(from: x) { result in
        vvpow{% if type.name == "Float" %}f{% endif %}(result, x.pointer, y.pointer, x.countPointer)
    }
}

public func sqrt(_ x: {{ type.name }}List) -> {{ type.name }} {
    return result(from: x) { result in
        vvsqrt{% if type.name == "Float" %}f{% endif %}(result, x.pointer, x.countPointer)
    }
}

public func mod(_ x: {{ type.name }}List, _ y: {{ type.name }}List) -> {{ type.name }}List {
    return result(from: x) { result in
        vvfmod{% if type.name == "Float" %}f{% endif %}(result, x.pointer, y.pointer, x.countPointer)
    }
}

public func rootMeanSquare(_ x: {{ type.name }}List) -> {{ type.name }} {
    return result(from: x) { result in
        vDSP_rmsqv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, x.vDSP_Length)
    }
}

public func meanSquare(_ x: {{ type.name }}List) -> {{ type.name }} {
    return result(from: x) { result in
        vDSP_measqv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, x.vDSP_Length)
    }
}

public func mean(_ x: {{ type.name }}List) -> {{ type.name }} {
    return result(from: x) { result in
        vDSP_meanv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, x.vDSP_Length)
    }
}

public func meanMagnitude(_ x: {{ type.name }}List) -> {{ type.name }} {
    return result(from: x) { result in
        vDSP_meamgv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, x.vDSP_Length)
    }
}

public func min(_ x: {{ type.name }}List) -> {{ type.name }} {
    return result(from: x) { result in
        vDSP_minv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, x.vDSP_Length)
    }
}

public func max(_ x: {{ type.name }}List) -> {{ type.name }} {
    return result(from: x) { result in
        vDSP_maxv{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, x.vDSP_Length)
    }
}

public func abs(_ x: {{ type.name }}List) -> {{ type.name }}List {
    return result(from: x) { result in
        vDSP_vabs{% if type.name == "Double" %}D{% endif %}(x.pointer, 1, result, 1, x.vDSP_Length)
    }
}
{% endfor %}
